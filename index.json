[
{
	"uri": "https://ansible-learnfest.github.io/1-intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction The goal of this LearnFest is to teach you how to use execution environments with ansible-builder, ansible-runner and the Red Hat Ansible Automation Platform 2.\n  Setup environment\n  Get familiar with Visual Studio Code\u0026rsquo;s Ansible extension\n  Setup private automation hub\n  Build the execution environment\n  Use the execution environment with ansible-navigator\n  Use the execution environment with automation controller\n  "
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/1-intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction The LearnFest is structured into two tracks, so this is coming your way:\nTrack 1 “Ansible Automation Platform Administrator” General Prerequisites:\n Access to PC with Ansible (esp ansible-navigator) Credentials/tokens to download the AAP2 installer and access the Red Hat Container registry and Red Hat Automation Hub  This usually means an account to the Red Hat Customer Portal   Optional: Write access to a GitLab or GitHub repository  Tasks:\n Install Automation Controller Write a Playbook using the ansible.controller collection to configure Automation Controller Install Private Automation Hub Work with Private Automation Hub Extend Automation Mesh Optional: Extending to multi node/cluster (Needs separate DB)  Track 2 “Automation Content Developer” General Prerequisites:\n Automation Controller and Private Automation Hub is up and running Access to ansible-builder is installed on RHEL 8 VM/instance  Tasks:\n Install and configure VSCode extension, learn how to use it Build a custom Execution Environment (EE) Use EE with ansible-navigator Push the EE to Private Automation Hub Use the EE in Automation Controller Change the EE Discuss version pinning, requirements management etc.  Let\u0026rsquo;s go!\n"
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/2-getting-started/",
	"title": "Prepare Base Environment",
	"tags": [],
	"description": "",
	"content": "Setup your LearnFest Base Environment You\u0026rsquo;ll run the LearnFest tasks on RHEL instances on AWS. So before starting with AAP you have to stand up the needed instances.\nThe guide has been tested using a blank AWS environment sandbox Red Hatters can order in RHPDS. But everything should work the same in a regular AWS account with access tho the RHEL 8 marketplace AMIs.\n Deploy RHEL Instances into AWS Account So off to the first tasks: deploy the needed RHEL instances into an AWS account. And as a warm-up you\u0026rsquo;ll use Ansible for this (we have prepared the Playbook for you). If this your first encounter with Execution Environments and ansible-navigator; just enjoy, you\u0026rsquo;ll learn more about all this later.\nPrerequisites\n A PC or VM prepared to run ansible-navigator and podman Make sure you have access to an AWS account, Red Hatters please deploy Service \u0026ldquo;AWS Blank Open Environment\u0026rdquo; from RHPDS Make sure you have a valid Access Key ID and a Secret Access Key for your AWS account, Red Hatters will find this in the confirmation email from RHPDS  Tasks\n On your ansible-navigator machine: Clone https://github.com/ansible-learnfest/playbooks-infra.git and change into the new directory. Follow the instructions in the repo\u0026rsquo;s README.md file to deploy the LearnFest base environment instances  Update the number of instances in group_vars/all/main.yml to 5 (instance_total:) Change the name prefix (instance_name:) of the instances if you want The Playbook will use the SSH key ~/.ssh/id_rsa.pub by default, if this key doesn\u0026rsquo;t exist or you want to use another key, change ec2_key_pair: run the playbook with ansible-navigator run cloud-infra.yml    How did ansible-navigator know which execution environment to use? Have a look at the ansible-navigator.yml config file\u0026hellip;\n Goals\n 5 x t3.large instances deployed in a new AWS VPC Look up the Public IPv4 DNS FQDN of your instances in the AWS Console. Being able to login via SSH into the instances using the FQDN\u0026rsquo;s and to become root  Example: ssh -i \u0026quot;~/.ssh/id_rsa\u0026quot; ec2-user@ec2-3-72-65-199.eu-central-1.compute.amazonaws.com    Tips\n Podman login for pulling the execution environment image is your quay.io credentials with encrypted password, not the RH Customer Portal credentials.  Instructions on how to get an employee account are on the source (Request a “Type 1” account) Verify you can access the execution environment   Using the Ansible content from our repo you can tear down all instances and the VPC and start over: ansible-navigator run cloud-infra.yml -e remove=true  "
},
{
	"uri": "https://ansible-learnfest.github.io/10-prepare-environment/",
	"title": "Prepare Environment",
	"tags": [],
	"description": "",
	"content": "Setup your LearnFest Environment For the Ansible LearnFest we use the AAP2 Linux Automation Workshop from RHPDS. If you run this workshop during Red Hat Tech Exchange, a lab was already created and details will be provided to you.\nIf you provision or order your own lab, make sure you enable the private automation hub.\n"
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/3-track-1/",
	"title": "Track 1: AAP Administrator",
	"tags": [],
	"description": "",
	"content": "Track 1 “Ansible Automation Platform Administrator” Tasks:\n Install Automation Controller Write a Playbook using the ansible.controller collection to configure Automation Controller Install Private Automation Hub Work with Private Automation Hub Extend Automation Mesh Optional: Extending to multi node/cluster (Needs separate DB)  "
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/3-track-1/1-automation-controller/",
	"title": "Install Automation Controller",
	"tags": [],
	"description": "",
	"content": "Task 1: Install Automation Controller You should now have access to your AWS instances and you should be able to SSH into them. It’s time to deploy Ansible Automation Platform 2.2! We’ll start with installing Automation Controller on your instance 1.\nPrerequisites\n Running instances on AWS Able to SSH into your instances and to become root A Red Hat Customer Portal account with an AAP subscription  Tasks\n SSH into your instance number 1 (demo1 if you didn\u0026rsquo;t change the main vars) to run the installer there. Become root: sudo -i Download the latest Ansible Automation Platform 2.2.0 Setup Bundle installer from Customer Portal to your instance.  The link to the download location can also be found in the installation docs. Tip: Copy the download link and use curl with single quotes around the link and the -o \u0026lt;filename\u0026gt; option to save to file.    In general follow the installation documentation to install Automation Controller with a database on the same node.\n Extract installer tarball, change into the directory. Create the most simple inventory file, do not install privat automation hub or anything else yet. Backup the default inventory file before.  There is an example for a basic inventory file for our simple installation scenario in chapter 2 of the installation documentation (see tips below). Attention: you can’t use “localhost” in the inventory file anymore, change it to the FQDN of the instance. You have to change all \u0026lt;...\u0026gt; values in the template   Hints:  You can skip the docs section “Attaching your Red Hat Ansible Automation Platform subscription“ because we are using the bundle installer and the AWS RHEL instances are already attached to the default RHEL 8 repos.   Run the platform installer with ./setup.sh When Automation Controller has been installed:  Login and attach an AAP Subscription using your Customer Portal User/Password Allow Analytics Accept   There you have it, your Automation Controller is up and running.  Goal\n Being able to log in to the web UI with the password you provided in the inventory file.  Tips\n Ansible Automation Platform 2.2 Installation Guide There is a link to instructions for creating a registry account in the docs (“Creating Registry Service Accounts guide”) There are instructions for obtaining the Red Hat Ansible Automation Platform installer in the docs (“Choosing and obtaining a Red Hat Ansible Automation Platform installer”)  "
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/3-track-1/2-config-controller/",
	"title": "Configure Automation Controller",
	"tags": [],
	"description": "",
	"content": "Task 2: Configure Automation Controller Okay, Automation Controller is up and running but pretty empty. In this task you add some automation content to it. To make it not too easy and resemble more real life situations, you will use Ansible to configure Automation Controller objects.\nPrerequisites\n Automation Controller is running \u0026amp; accessible You can run ansible-navigator on a laptop/VM.  Tasks\n Create a Playbook using the ansible.controller collection to create these objects in your Automation Controller:  Inventory Hosts in the inventory Machine credentials to connect to your managed host Project to pull Ansible content from Template to install Apache on the managed hosts   If you haven\u0026rsquo;t done this before it might sound daunting, but fear not: You can find a complete template below in the Tips section.  BTW you don\u0026rsquo;t have to install the ansible.controller collection because it\u0026rsquo;s already baked into the EE we used before to deploy instances.\n Okay\u0026hellip;\n On your system create a new directory next to the one with the cloned git repo from deploying the AWS instances. In the new directory create a Playbook resembling the one from our lab.  Note: We are using the supported collection ansible.controller here, upstream is called awx.awx. Change the loop in the creating hosts section to only contain the public FQDN of your managed node instance.  Assuming you didn\u0026rsquo;t change it this should only be your instance number 5   Make sure ssh_key_data: points to the SSH key you use to connect to the instances    You have seen how ansible-navigator knew which Execution Environment image to use, right? But this only works if you have the needed configuration in ansible-navigator.ymlliving in the same directory you run ansible-navigator from. You can specify the EE and other parameters on the commandline but it\u0026rsquo;s easier to track what you\u0026rsquo;ve done in the config file. As a start copy the ansible-navigator.yml file over to your new directory and adapt it if needed.\n  Configure credentials for the ansible.controller collection modules to be able to talk to your Automation Controller:  Set the environment variables CONTROLLER_HOST, CONTROLLER_USERNAME, CONTROLLER_PASSWORD with the values of your Automation Controller and set CONTROLLER_VERIFY_SSL=false Important: Add the env vars above to the ansible-navigator.yml file  This way they are available in the running container! Add only the name of the variable under the env vars already in the file!     Run the Playbook using ansible-navigator  Hint: Use -m stdout to mimic the output of ansible-playbook    Goal\n The Playbook configured the objects needed The Template run installed and started Apache on your managed node, should be instance 5 Opening the default webpage on the managed node in a browser works.  Tips\n Here is the template for the Playbook:  Click here for Template   --- - name: Configure automation controller hosts: localhost become: false gather_facts: false tasks: - name: Create an inventory ansible.controller.inventory: name: Learnfest Inventory organization: Default - name: Add hosts to inventory ansible.controller.host: name: \u0026quot;{{ item }}\u0026quot; inventory: Learnfest Inventory state: present loop: - \u0026lt;instance-5\u0026gt; - name: Machine Credentials ansible.controller.credential: name: Learnfest Credentials credential_type: Machine organization: Default inputs: username: ec2-user ssh_key_data: \u0026quot;{{ lookup('file', '~/.ssh/\u0026lt;GUID\u0026gt;key.pem' ) }}\u0026quot; - name: Learnfest Project ansible.controller.project: name: Learnfest Project organization: Default state: present scm_update_on_launch: True scm_delete_on_update: True scm_type: git scm_url: https://github.com/ansible-learnfest/playbooks-example.git - name: Learnfest Job Template ansible.controller.job_template: name: Install Apache organization: Default state: present inventory: Learnfest Inventory become_enabled: True playbook: apache_install.yml project: Learnfest Project credential: Learnfest Credentials \n   The collection/module documentation is here in Automation Hub. Go to Collections and filter for controller. If you would like to know what collections are in a certain Execution Environment, run ansible-navigator collections against the EE in question. If you get confused by all the naming changes (ansible.controller in Automation Hub, awx.awx upstream, lot\u0026rsquo;s of references to Tower in the docs)\u0026hellip; don\u0026rsquo;t be, all will finally be good! (TM)  "
},
{
	"uri": "https://ansible-learnfest.github.io/20-vscode/",
	"title": "The VSCode extension",
	"tags": [],
	"description": "",
	"content": "Introduction to the VSCode extension We highly recommend making yourself familiar with Visual Studio Code and the Ansible extension. Even if you’re not planning to use it as your daily driver, it is good to know how it works to explain and show the benefit to customers.\nTODO: Check this still works in VSCode Server - it\u0026rsquo;s probably already installed\nPrerequisites   You should have a Linux workstation setup\n  Install ansible-core, ansible-lint and podman on your Linux workstation\n  Install ansible-navigator for using execution environments\n  Tasks  Install VSCode https://code.visualstudio.com/  If your lab was deployed from RHPDS you already have VS Code Server available and don\u0026rsquo;t have to install it again.\n   Install the Ansible extension: https://marketplace.visualstudio.com/items?itemName=redhat.ansible\n  To install the extension, click on the Extensions menu on the left navigation bar, or from the View menu.\n  Search for \u0026ldquo;Ansible\u0026rdquo; and make sure to install the collection provided by Red Hat\n  If you use VSCode server, you might see a \u0026ldquo;reload\u0026rdquo; button which you need to click to complete the installation.\n You can now test the extension by performing the following tasks.\n  Create a playbook/role/collection\n  Set Language Mode to Ansible\nEither on the VSCode status bar or put this into ~/.config/Code/User/settings.json:\n  \u0026#34;files.associations\u0026#34;: { \u0026#34;*.yml\u0026#34;: \u0026#34;ansible\u0026#34;, \u0026#34;*.yaml\u0026#34;: \u0026#34;ansible\u0026#34; },   you can also change the file type by clicking on the respective button in the status bar on the bottom of the VSCode window\n  tab completion\n  syntax highlighting\n  tool tips for modules: hover over a module FQCN, Ctrl+Click on a module FQCN to open its documentation\n  Ctrl+Space for module parameters, e.g. add a task calling ansible.builtin.yum and use Ctrl+Space to see all module attributes and attribute parameters\n  Make syntax error and notice errors in the Problem pane (Ctrl+Shift+m): you might have to make sure ansible-lint is enabled and notice it is only checking when you save a file\n  Goals Start VSCode, install the Ansible extension and get familiar with its features.\nTips Although VSCode of course runs on Linux, Mac and Windows, there are some extra tasks to be done to get Ansible working on Windows. It\u0026rsquo;s beyond the scope of this manual to provide detailed instructions on how to setup Podman and Ansible on Windows.\nChallenge Tasks Try to configure VSCode to use Ansible inside an execution environment. The EE supported is already installed on the bastion host and can be used for these experiments.\n"
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/3-track-1/3-install-pah/",
	"title": "Install Private Automation Hub",
	"tags": [],
	"description": "",
	"content": "Task 3: Install Private Automation Hub The next step on your way to a full AAP infrastructure is to install Private Automation Hub (PAH) as on-premise complement to Red Hat Automation Hub. PAH allows to mirror Automation Hub and Ansible Galaxy collections as well as own in-house content. And in addition PAH can act as a container registry for execution environments images.\nPrerequisites\n Automation Controller is running \u0026amp; accessible You can connect to your instance 2  Tasks\n Install Private Automation Hub on your instance number 2, the documentation is here in chapter 2.3. The easiest way is to SSH into to the PAH instance, download the installer bundle like you did for Controller and install PAH locally (as in \u0026ldquo;don\u0026rsquo;t have the installer SSH to a remote machine\u0026rdquo;).  You can run the AAP installer in different ways, of course. You could run it from a competely different machine and connect to the hosts AAP is to be installed on, you could run it on the Controller instance like you did and have it connect to the PAH instance\u0026hellip; but for now do it the easy way so you don\u0026rsquo;t have to fiddle with SSH keys and become settings. :)\n  So go ahead, SSH to instance 2, become root and download the installer bundle again Take the inventory PAH example from the docs referenced above and adapt it to your needs.  Remember to replace localhost/127.0.0.1 with the public FQDN   Run the installer with your customized inventory file  Goal\n Opening and login to the Private Automation Hub web UI works.  Tips\n"
},
{
	"uri": "https://ansible-learnfest.github.io/30-use-pah/",
	"title": "Using Private Automation Hub",
	"tags": [],
	"description": "",
	"content": "Using Private Automation Hub Prerequisites   Automation Controller is running and accessible\n  Private Automation Hub is running and accessible\n  Tasks   Configure Automation Controller to access your Private Automation Hub\n  Add collections from Red Hat Automation Hub, Galaxy and custom ones created by you.\n  Add execution environment images\n  Let\u0026rsquo;s start, as the docs for this are distributed over some places we\u0026rsquo;ll give some more instructions.\nAdd content to your private Automation Hub Most of this is well documented here\nSync collections from Red Hat Automation Hub   Go to console.redhat.com and open Ansible Automation Platform -\u0026gt; Automation Hub -\u0026gt; Collections. Here you can enable/disable the sync of certain collections.\n  What you need to do is to get the authentication token and configure it in your PAH:\n  In Red Hat Automation Hub go to Connect to Hub we will need the Offline Token and the Server URL\n  In your private automation hub go to Collections -\u0026gt; Repository management -\u0026gt; Remote\n  Edit the rh-certified remote:\n  URL paste the Server URL from the Red Hat Automation Hub\n  Token the token you copied from RH AH\n  Click Save and then hit Sync. This will sync all enabled and updated collections from Red Hat Automation Hub to your Private Automation Hub.\n      Sync selected community collections from Ansible Galaxy Galaxy is configured as the remote community out of the box. Follow the instructions to configure the synchronization.\n Create a regular requirements.yml file pointing to the collection you want, we\u0026rsquo;ll use the one from the docs:  collections: # Install a collection from Ansible Galaxy. - name: containers.podman   Go to Repo Management, click the Remote tab again\n  Edit the community remote\n  In YAML requirements upload the requirements.yml file from your local machine.\n  Click Save\n  In the Remote overview tab click Sync for the community remote\n  Verify the sync of the collections in Collections -\u0026gt; Collections, switch the repositories with the dropdown at the top. There should be a lot of content in the Red Hat Certified repo and one collection in the Community repo.\nPush Images to PAH Registry TODO: This EE example won\u0026rsquo;t work\n  As test push a local image to PAH\n  First login to the PAH registry: podman login --tls-verify=false \u0026lt;PAH-HOST\u0026gt;\n  Example: podman push --tls-verify=false quay.io/redhat_emp1/ee-ansible-ssa \u0026lt;PAH-HOST\u0026gt;/ee-ansible-ssa\n  Check in PAH under Execution Environments\n  Test Private Automation Hub Integration Now check that your Automation Controller can actually use the content from your PAH:\n  Create a new Project pointing here: https://github.com/ansible-learnfest/ee-flow.git\n Have a look at the content, esp the collections/requirements.yml file    Create an inventory of the target machine or update Workshop Inventory by removing ansible-1 from the list of Hosts\n  Create a new Template:\n  Name: up to you\n  Inventory: The one you set up with the Playbook before, it should contain one of your AWS instances\n  Project: The one you just created\n  Execution Environment: Ansible Engine 2.9 execution environment\n  Playbook: deploy-container.yml\n  Check Privilege Escalation\n  Set the right inventory : Workshop Inventory\n  Set the right Credentials : Workshop Credential\n    Launch the Template, if all was configured correctly it should deploy an httpd container that is hosting a small website.\n  So recap what happened:\n  You created a Template that runs a Playbook that has a requirement on a certain Collection which is not part of the Execution Environments included in Controller.\n  Your Organization (default) is configured in a way it can only download Collections from your Private Automation Hub\n  The Collection did exist on your PAH\n  Important: As this collection is not part of the Execution Environment the Playbook run in, how did it work? In this case is it was dynamically \u0026ldquo;added\u0026rdquo; to the Execution Environment at runtime.\n  Goals Be able to manually configure private automation hub to synchronize content from Red Hat\u0026rsquo;s automation hub and Ansible Galaxy.\nTips  Check the list of certified collections in the Red Hat Customer Portal  "
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/3-track-1/4-use-pah/",
	"title": "Using Private Automation Hub",
	"tags": [],
	"description": "",
	"content": "Task 4: Using Private Automation Hub Prerequisites\n Automation Controller is running \u0026amp; accessible Private Automation Hub is running \u0026amp; accessible  Tasks\n Configure Automation Controller to access your Private Automation Hub Add collections from Red Hat Automation Hub, Galaxy and custom ones created by you. Add Excution Environment images  Important: You only have to do this because we didn\u0026rsquo;t have installer install Controller and PAH in one go. Then the integration would have been configured for you already. For the sake of understanding we decided to let you do this manually. Note: The Execution Environemnt images coming with the bundle installer have been pushed to the PAH registry already.\n Let\u0026rsquo;s start, as the docs for this are distributed over some places we\u0026rsquo;ll give some more instructions.\nIntegrate Private Automation Hub into Automation Controller  In your PAH go to Collections-\u0026gt;API token management, hit Load Token and copy the token. Put it somewhere, the token will change every time you have to get it this way! In Controller, go to Resources-\u0026gt;Credentials and Add three new credentials:  Name them PAH community, PAH certified and Pah published All belong to the Organisation default Credential Type is Ansible Galaxy/Automation Hub API Token Look up the Galaxy Server URL for each in PAH: In Collections-\u0026gt;Repository Management lookup the Repo URL for community, published and rh-certified and put them in respectively. You have created the API token already, paste in into the credentials As your PAH is using a self-signed certificate, disable the certificate verification:  Go to Settings-\u0026gt;Jobs Settings, click Edit and set Ignore Ansible Galaxy SSL Certificate Verification to On      The last thing you have to setup is to configure the Organization (default here) to use the PAH credentials and the order it searches them:\n Go to Access-\u0026gt;Organizations, choose the default Organization and click Edit In Galaxy Credentials remove Ansible Galaxy and add our three PAH credentials Note how you could change the order here Click Save  Add content to your Private Automation Hub Most of this is well documented here\nSync collections from Red Hat Automation Hub  Go to console.redhat.com and open Ansible Automation Platform-\u0026gt;Automation Hub-\u0026gt;Collections. Here you could enable/disable the sync of certain collections but there is a bug as of now! We\u0026rsquo;ll give you a working URL to sync all content as a workaround. What you need to do is to get the autentication token and configure it in your PAH:  In Red Hat Automation Hub Go to Connect to Hub and copy the Offline Token In PAH go to Collections-\u0026gt;Repository management-\u0026gt;Remote Edit the rh-certified remote:  URL `https://console.redhat.com/api/automation-hub/content/published/ Token the token you copied from RH AH Click Save and then hit Sync. This will sync all collections from Red Hat Automation Hub to your Private Automation Hub.      Sync selected comunity collections from Ansible Galaxy  Galaxy is configured as the remote community out of the box To sync collections:  Create a regular requirements.yml file pointing to the collection you want, we\u0026rsquo;ll use the one from the docs:    collections: # Install a collection from Ansible Galaxy. - name: geerlingguy.php_roles version: 0.9.3 source: https://galaxy.ansible.com  Go to Repo Management, click the Remote tab again Edit the community remote In YAML requirements upload the requirements.yml file from your local machine. Click Save In the Remote overview tab click Sync for the community remote  Verify the sync of the collections in Collections-\u0026gt;Collections, switch the repositories with the dropdown at the top. There should be a lot of content in the Red Hat Certified repo and one collection in the Community repo.\nPush Images to PAH Registry  As test push a local image to PAH First login to the PAH registry: podman login --tls-verify=false \u0026lt;PAH-HOST\u0026gt; Example: podman push --tls-verify=false quay.io/redhat_emp1/ee-ansible-ssa \u0026lt;PAH-HOST\u0026gt;/ee-ansible-ssa Check in PAH under Execution Environments  Test Private Automation Hub Integration Now check that your Automation Controller can actually use the content from your PAH:\n Create a new Project pointing here: https://github.com/ansible-learnfest/playbooks-example.git  Have a look at the content, esp the collections/requirements.yml file   Create a new Template:  Name: up to you Inventory: The one you set up with the Playbook before, it should contain one of your AWS instances Project: The one you just created Execution Environment: Ansible Engine 2.9 execution environment Playbook: install-php.yml Check Privilege Escalation   Launch the Template, if all was configured correctly it should install PHP modules on the managed node.  So recap what happened:\n You created a Template that runs a Playbook that has a requirement on a certain Collection which is not part of the Execution Environments included in Controller. Your Organization (default) is configured in a way it can only download Collections from your Private Automation Hub The Collection did exist on your PAH Important: As this collection is not part of the Execution Environment the Playbook run in, how did it work? In this case is it was dynamically \u0026ldquo;added\u0026rdquo; to the Execution Environment at runtime.  Goal\nTips\n"
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/3-track-1/5-automation-mesh/",
	"title": "Extend Automation Mesh",
	"tags": [],
	"description": "",
	"content": "Task 5: Extend Automation Mesh Even a single-node Automation Controller installation contains an Automation Mesh, in this case it\u0026rsquo;s living on the Controller node itself. In this case the node type is called \u0026ldquo;hybrid\u0026rdquo;, although you can install node types \u0026ldquo;control\u0026rdquo; but then you need execution nodes again.\nGo and check this on your Controller under Topology View. This section is about extending the Automation Mesh with a second Execution Node.\nPrerequisites\n Automation Controller is running \u0026amp; accessible You have run example Ansible content against an managed node  Tasks\nInstall Execution Node  You need to enable the AAP installer on your Controller node to connect to one of your AWS instances via SSH. This means either  to copy the private key you are using to connect to your instances to the Controller instance or to create a new SSH key on the Controller and copy the public key to the authorized_keys file on the machine you want to use as Execution Node.   For the fun of it you need to do a small AWS exercise: Open port 27199 on your Controller and your Execution Node by adding it to their respective Security Groups in the AWS Console  This is the receptor port Automation Mesh is communicating on and not open on the default AWS instance deployments.   To install the Execution Node, edit the inventory file on your Controller by adding these lines:  [automationcontroller:vars] peers=execution_nodes [execution_nodes] \u0026lt;execution node\u0026gt; ansible_user=ec2-user ansible_become=yes  Run the installer, wait for successful completion  Use the Execution Node Right now you have execution nodes, one is the Controller as a hybrid node, the other is the new Execution node. Now use the node by configuring the Controller to execute the jobs for your managed node on the new Execution node.\n Add a new Instance Group Add the Execution Node to the Instance Node You can configure on Organization, Inventory and Template level to use a specific Execution Node. Do this for the Template installing PHP or the Inventory with the managed node. Or play around, it\u0026rsquo;s a LearnFest after all. Launch the Template and make sure it run on the Execution Node.  Goal\n The installer installs the execution node without errors The new node appears in the Controller web UI under Topology View, you should now have one Hybrid Node and one Execution Node. You can launch a Template using the Execution Node to run it.  Tips\n The Automation Mesh documentation is here  "
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/3-track-1/6-aap2-fullstack/",
	"title": "AAP 2 Full Stack Installation",
	"tags": [],
	"description": "",
	"content": "Task 6: Start over with Full-Stack Installation Until now you installed and configured an AAP 2.2 environment component by component. In real life you would have the installer deploy all components in one go, so you would get an environment with integrated components consisting of:\n Automation Controller Private Automation Hub Automation Services Catalog (Tech Preview) Red Hat SSO for central authentication (required for Catalog, optional for other components)  So in this section you\u0026rsquo;ll build the whole thing.\nPrerequisites\n Delete your AWS environment  ansible-navigator run cloud-infra.yml -m stdout -e remove=true\n and start over with new instances:  ansible-navigator run cloud-infra.yml -m stdout\n Open the instances security groups so we don\u0026rsquo;t have to tweak filter rules for now. Disclaimer: Only for lab use, not in real life! In the AWS console for each of your instances  Go to Instance Details -\u0026gt; Security -\u0026gt; Click \u0026ldquo;Security Group\u0026rdquo; Add an inbound rule All traffic to 0.0.0.0/0 Save    Tasks\n SSH to instance 1, as root create a new SSH key pair (ssh-keygen)and add the new public key to the authorized_keys file of ec2-user on the other three instances.  The AAP installer on instance 1 needs to SSH into the other instances!   Download/unpack the Ansible Automation Platform 2.2.0 Setup Bundle on instance 1 again. Register the SSO host (instance 4) and enable Java repo (yeah, RH SSO is Java-based!)  subscription-manager register subscription-manager repos --enable=jb-eap-7.3-for-rhel-8-x86_64-rpms   Create an inventory file to configure Installer:  Use the template below, fill in missing values   The inventory should:  install Controller on instance 1 install the other three AAP components from instance 1 on the other instances: instance 2 - PAH, instance 3 - Catalog, instance 4 - SSO    Ansible basics: Disable host key checking, either by running export ANSIBLE_HOST_KEY_CHECKING=False; ./setup.sh or by putting\n[defaults] host_key_checking = False into ./ansible.cfg\n  Run the installer Get a coffee. Or two.  After the installation has finished, Private Automation Hub and Automation Services Catalog are configured for SSO. So to be able to login to the UIs, you have to configure a user with the proper roles in RH SSO.\n Create an admin user for PAH and catalog in the RH SSO Admin UI (https://\u0026lt;instance\u0026gt;:8443):  Manage -\u0026gt; Users -\u0026gt; View all users Create user aapadmin Save Set a password in Credentials In Role Mappings for this user: In Client Roles choose automation-catalog  Add role catalog-admin   For Client Role automation-hub  Add role hubadmin      Now you have a user with admin permissions for PAH and Catalog.\nGoal\n Access to the web UIs on all four instances:  Automation Controller (user admin, password as set in inventory) Private Automation Hub (SSO user) Automation Services Catalog (sso user) RH SSO Admin UI (Port 8443, user admin, password as set in inventory)    Tips\nExample inventory file:\n[automationcontroller] \u0026lt;instance-1\u0026gt; ansible_connection=local [automationcontroller:vars] peers=execution_nodes [execution_nodes] [automationhub] \u0026lt;instance-2\u0026gt; ansible_user=ec2-user ansible_become=true [automationcatalog] \u0026lt;instance-3\u0026gt; ansible_user=ec2-user ansible_become=true [database] [sso] \u0026lt;instance-4\u0026gt; ansible_user=ec2-user ansible_become=true [all:vars] admin_password='\u0026lt;password\u0026gt;' pg_host='' pg_port=5432 pg_database='awx' pg_username='awx' pg_password='\u0026lt;password\u0026gt;' pg_sslmode='prefer' # set to 'verify-full' for client-side enforced SSL registry_url='registry.redhat.io' registry_username='\u0026lt;registry user\u0026gt;' registry_password='\u0026lt;registry token or password' receptor_listener_port=27199 automationhub_admin_password='\u0026lt;password\u0026gt;' automationhub_pg_host='\u0026lt;instance-1\u0026gt;' automationhub_pg_port=5432 automationhub_pg_database='automationhub' automationhub_pg_username='automationhub' automationhub_pg_password='\u0026lt;password\u0026gt;' automationhub_pg_sslmode='prefer' automationcatalog_pg_host='\u0026lt;instance-1\u0026gt;' automationcatalog_pg_port=5432 automationcatalog_pg_database='automationservicescatalog' automationcatalog_pg_username='automationservicescatalog' automationcatalog_pg_password='\u0026lt;password\u0026gt;' automationcatalog_controller_verify_ssl=False sso_keystore_password='\u0026lt;password\u0026gt;' sso_console_admin_password='\u0026lt;password\u0026gt;' "
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/4-track-2/",
	"title": "Track 2: Automation Content Developer",
	"tags": [],
	"description": "",
	"content": "Track 2: Automation Content Developer Tasks:\n Install and configure VSCode extension, learn how to use it Build a custom Execution Environment (EE) Use EE with ansible-navigator Push the EE to Private Automation Hub Use the EE in Automation Controller Change the EE Discuss version pinning, requirements management etc.  "
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/4-track-2/1-vscode/",
	"title": "The VSCode extension",
	"tags": [],
	"description": "",
	"content": "Task 1: Learn about the VSCode extension We highly recommend making yourself familiar with VSCode and the Ansible extension. Even if you’re not planning to use it as your daily driver, it is good to know how it works to explain and show the benefit to customers.\nPrerequisites  You should have a Linux workstation setup Install ansible, ansible-lint and podman on your Linux workstation Install ansible-navigator for using execution environments  Tasks  Install VSCode https://code.visualstudio.com/ Install the Ansible extension: https://marketplace.visualstudio.com/items?itemName=redhat.ansible Create a playbook/role/collection Get familiar with the VSCode extension features  Set Language Mode to Ansible  Either on the VSCode status bar or put this into ~/.config/Code/User/settings.json:      \u0026#34;files.associations\u0026#34;: { \u0026#34;*.yml\u0026#34;: \u0026#34;ansible\u0026#34;, \u0026#34;*.yaml\u0026#34;: \u0026#34;ansible\u0026#34; },  tab completion syntax highlighting tool tips for modules: hover over a modul FQCN, Ctrl+Click on a modul FQCN to open documentation Ctrl+Space for module parameters, e.g. add a task calling ansible.builtin.yum and use Ctrl+Space to see all module attributes and attribute parameters Make syntax error and notice errors in the Problem pane (Ctrl+Shift+m): you might have to make sure ansible-lint is enabled and notice it is only checking when you save a file  Goal Start VSCode and get familiar with its features.\nTips Although VSCode of course runs on Linux, Mac and Windows, there are some extra tasks to be done to get Ansible working on Windows. It\u0026rsquo;s beyond the scope of this manual to provide detailed instructions on how to setup Podman and Ansible on Windows.\nChallenge Tasks Try to configure VSCode to use Ansible inside an execution environment.\n"
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/3-track-1/7-bonus-using-catalog/",
	"title": "Bonus Track: Automation Catalog",
	"tags": [],
	"description": "",
	"content": "Bonus Track: Using Automation Services Catalog With a full-stack AAP 2.2 setup running along, you could start playing around with the brand new Automation Services Catalog. This is the new self-service portal replacing the hosted offering (and somehow one functionality of dear, old CloudForms).\nCatalog depends on RH SSO for Authentication, for PAH and Controller this is optional.\nRemember it\u0026rsquo;s early days; Catalog is in Tech Preview!\n Prerequisites\n A full AAP 2.2 installation (Controller, PAH, Catalog, RH SSO) Access to all web UIs  Tasks\n Start with Automation Services Catalog  Log in with the new user Check under Platforms Automation Controller status is Available, click the circular Refresh icon. Create a new Portfolio and access it To add a create a new Product, click Add and set Filter by Platform to Automation Controller Check the Demo Job Template tile and click Add Now you can order the Product, try it and check the Job is run in Controller.    Play from here on\n If you want to use PAH within an SSO-enabled setup, it now needs an SSO user, too. Create one or give the hubadmin role to your catalog-user. Set an approval for a Product, you need a user with SSO approver role. Create a Template with a Survey in Controller and use this in a new Product in Catalog.  Goal\n See what Catalog can do right now\u0026hellip; :-)  Tips\n"
},
{
	"uri": "https://ansible-learnfest.github.io/50-build-ee/",
	"title": "Build an execution environment",
	"tags": [],
	"description": "",
	"content": "Build an execution environment Execution environments are Linux container images which are built on top of the Red Hat Universal Base Images (UBI) and additionally contain:\n  ansible-core\n  Python and its dependencies\n  Ansible collections and their dependencies\n  optionally additional software packages like RPMs\n  This makes the execution of an ansible playbook more scalable, reliable and predictable since the combination of Playbook and execution environment should always deliver the same results.\nPrerequisites  Install ansible-builder: on RHEL this is provided by the AAP repo, on Fedora you will need “pip install ansible-builder”, it’s recommended to use a virtual environment in this case.  Tasks Checkout repo Clone the repo to your VS Code terminal\ngit clone https://github.com/ansible-learnfest/ee-flow.git Login to registry.redhat.io podman login registry.redhat.io Build Execution Environment   In the repo change to the ansible-builder directory\n  Run ansible-builder to create the new EE as in the example below:\n  ansible-builder build -f ee-ansible-demo.yml -t ee-ansible-demo:0.1.0 -v 3  Experiment with the other options, e.g. adding an RPM or Python package  Use the Execution Environment   Configure ansible-navigator to use the previously created EE either by specifying it on the command line or by creating an ansible-navigator.yml configuration file.\n  Inspect your EE by using ansible-navigator, e.g. to get the list of included collections, ansible versions etc.\n  Run a playbook with your EE and verify everything works as expected.\n  Write a playbook using the containers.podman to create containers or use the previously used example on ee-flow project without the requirements.yml file.\n  What do you notice\n    In a production environment we typically recommend to use the ee-minimal-rhel8 as a base image and only add the collections we specifically need. To make this lab not too complex, we decided to use the EE supported as a base image though.\n Goals   Build an EE adding at least one collection\n  Use your execution environment to create a container.\n  Tips   Ansible-builder documentation\n  Ansible Builder upstream documentation\n  Ansible-navigator documentation\n  Ansible Builder upstream documentation\n  List of certified collections\n  Simple EE example\n  "
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/4-track-2/2-build-ee/",
	"title": "Build an execution environment",
	"tags": [],
	"description": "",
	"content": "Task 2: Build an execution environment Prerequisites  Install ansible-builder: on RHEL this is provided by the AAP repo, on Fedora you will need “pip install ansible-builder”, it’s recommended to use a virtual environment in this case.  Tasks Build Execution Environment   Overview: Create an execution environment with the following requirements\n Base image is ee-supported-rhel8 Add a community collection e.g. containers.podman Add a supported content collection e.g. azure.azcollection Experiment with the other options, e.g. adding an RPM or Python package    Create the needed definition files to build the EE according to the specs above.\n  You can adapt the files from here (from the Simple EE example linked to in the Tips section).\n  In your EE definition file set the base image to (Red Hat Registry access required)\nbuild_arg_defaults: EE_BASE_IMAGE: 'registry.redhat.io/ansible-automation-platform-22/ee-minimal-rhel8'   Use ansible-builder to build the EE, for example:\nansible-builder -f /path/to/your/definition.yml -t yourname:1.0.0     Use the Execution Environment  Configure ansible-navigator to use the previously created EE either by specifying it on the command line or by creating an ansible-navigator.yml configuration file (you have one from Track 1). Inspect your EE by using ansible-navigator, e.g. to get the list of included collections, ansible versions etc. Run a playbook with your EE and verify everything works as expected. Why not deploy Azure objects?  Use environment variables to provide your Azure credentials. Red Hatters can get Azure credentials from RHPDS’ Azure Blank Open environment. Write a playbook using the azure.azcollection to create objects in Azure you can find an example playbook in the playbook-infra project    In a production environment we typically recommend to use the ee-minimal-rhel8 as a base image and only add the collections we specifically need. To make this lab not too complex, we decided to use the EE supported as a base image though.\n Goal  Build an EE adding two collections Use your execution environment to create an instance in Azure Don\u0026rsquo;t forget to remove the instance and all associated resources - you can actually just remove the resource group which will remove all objects created within.  Tips  Ansible-builder documentation Ansible Builder upstream documentation Ansible-navigator documentation Ansible Builder upstream documentation List of certified collections Simple EE example  "
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/",
	"title": "Version 0.1",
	"tags": [],
	"description": "",
	"content": "Version 0.1 This is the original version of the Ansible LearnFest.\n"
},
{
	"uri": "https://ansible-learnfest.github.io/55-transfer-ee/",
	"title": "Transfer Execution Environment",
	"tags": [],
	"description": "",
	"content": "Transfer your EE Prerequisites   A working execution environment\n  private automation hub to store your EE\n  Tasks   Publish your EE to your private automation hub\n  Add additional tags or labels and push them to the registry\n  Experiment with other registries, e.g. Quay (make sure to either delete your EE after you\u0026rsquo;re done or make sure it’s not publicly accessible since the EE supported requires a subscription!)\n  Delete old versions of the EE\n  Push image to PAH podman login hub-student.\u0026lt;LABID\u0026gt;.example.opentlc.com --tls-verify=false --username admin --password \u0026lt;YOURPASSWORD\u0026gt; podman tag localhost/ee-ansible-demo:0.1.0 hub-student.\u0026lt;LABID\u0026gt;.example.opentlc.com/ee-ansible-demo:latest podman push localhost/ee-ansible-demo:0.1.0 hub-student.\u0026lt;LABID\u0026gt;.example.opentlc.com/ee-ansible-demo --tls-verify=false Goals   Publish an EE in your own registry\n  Get familiar with basic EE management tasks\n  Tips   Skopeo documentation\n  Podman documentation\n  "
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/4-track-2/3-transfer-ee/",
	"title": "Transfer Execution Environment",
	"tags": [],
	"description": "",
	"content": "Task 3: Transfer your EE Prerequisites  a working execution environment private automation hub to store your EE  Tasks  Publish your EE to your private automation hub Add additional tags or labels and push them to the registry Experiment with other registries, e.g. Quay (make sure to either delete your EE after you\u0026rsquo;re done or make sure it’s not publicly accessible since the EE supported requires a subscription!) Delete old versions of the EE  Goal  Publish an EE in your own registry Get familiar with basic EE management tasks  Tips  Skopeo documentation Podman documentation  "
},
{
	"uri": "https://ansible-learnfest.github.io/60-use-ee/",
	"title": "Use the EE in controller",
	"tags": [],
	"description": "",
	"content": "Use the EE in controller Prerequisites   Publish an EE to private automation hub\n  Configure controller to access the private automation hub and pull the EE\n  Tasks Configure EE in Controller   Check the Credential Automation Hub Container Registry points to the PAH\n  Go to Execution Environments and configure the new EE\n  Name: ee-ansible-demo\n  Image: hub-student.LABID.example.opentlc.com/ee-ansible-ssa/latest\n  Credential: Automation Hub Container Registry\n    Create registry credentials in controller.\n Don\u0026rsquo;t forget to untick Verify SSL    Create the EE in controller\n  Create a job template using the newly created EE\n  Test a playbook with the collection you added to the EE, e.g. deploy a new container\n  There is an example playbook available in the deploy-container.yml project\n  Create Project  Create a new Project to point to https://github.com/ansible-learnfest/ee-flow.git  Challenge tasks   Build another EE with different content, import it into Controller and use different job templates with different EE’s\n  Think about version pinning in the EE: what’s the best way to do it? How can you track versioning?\n  If you use GitLab or GitHub have a look at renovate which can help you to track dependencies. https://docs.renovatebot.com/\n  Goal  Get familiar with using EE\u0026rsquo;s in controller and different job templates  Tips "
},
{
	"uri": "https://ansible-learnfest.github.io/archive/version-0.1/4-track-2/4-use-ee/",
	"title": "Using Private Automation Hub",
	"tags": [],
	"description": "",
	"content": "Task 4: Use the EE in controller Prerequisites  Publish an EE to private automation hub Configure controller to access the private automation hub and pull the EE  Tasks  Create registry credentials in controller Create the EE in controller Create a job template using the EE Test a playbook with the collection you added to the EE, e.g. perform an action in Azure There is an example playbook available in the playbook-infra project  Challenge tasks  Build another EE with different content, import it into Controller and use different job templates with different EE’s Think about version pinning in the EE: what’s the best way to do it? How can you track versioning? If you use GitLab or GitHub have a look at renovate which can help you to track dependencies. https://docs.renovatebot.com/  Goal  Get familiar with using EE\u0026rsquo;s in controller and different job templates  "
},
{
	"uri": "https://ansible-learnfest.github.io/archive/",
	"title": "Archive",
	"tags": [],
	"description": "",
	"content": "Archive You will find old archived versions of the lab guide here.\nVersion 0.1\n"
},
{
	"uri": "https://ansible-learnfest.github.io/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Ansible LearnFest Guide What is this about The Ansible LearnFest is a format we created because we felt there is a gap between the enablement and training offerings from Red Hat (workshops, guided labs, official trainings) and \u0026ldquo;real\u0026rdquo; hackathons with an open agenda. We wanted a format where the student gets tasks, goals and hints to help install and configure all the components of Ansible Automation Platform like Automation Controller, Private Automation Hub, Automation Mesh, Clustering, Automation Service Catalog etc him/herself.\nThis guide will lead you through exactly this: installing, configuring and using Ansible Automation Platform. But this is not your usual lab guide where you can follow along without a lot of thought; this is not supposed to be a fully scripted lab or workshop but a guided learning experience where you will get real hands-on experience by running all steps yourself.\nCollaboration The Ansible LearnFest and this guide was created by Goetz Rieger and Christian Jung. Feel free to create a pull request or an issue in GitHub\n"
},
{
	"uri": "https://ansible-learnfest.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ansible-learnfest.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]