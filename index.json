[
{
	"uri": "https://ansible-learnfest.github.io/1-intro/",
	"title": "The DevSecOps Workshop",
	"tags": [],
	"description": "",
	"content": "Intro This is the storyline you\u0026rsquo;ll follow:\n Create application using the browser based development environment CodeReady Workspaces Setting up the Inner Development Loop for the individual developer  Use the cli tool odo to create, push, change apps on the fly   Setting up the Outer Development Loop for the team CI/CD  Learn to work with OpenShift Pipelines based on Tekton Use OpenShift GitOps based on ArgoCD   Secure your app and OpenShift cluster with ACS  Introduction to ACS Example use cases Add ACS scanning to Tekton Pipeline    What to Expect This workshop is for intermediate OpenShift users. A good understanding of how OpenShift works along with hands-on experience is expected. For example we will not tell you how to log in with oc to your cluster or tell you what it is\u0026hellip; ;)\n We try to balance guided workshop steps and challenging you to use your knowledge to learn new skills. This means you\u0026rsquo;ll get detailed step-by-step instructions for every new chapter/task, later on the guide will become less verbose and we\u0026rsquo;ll weave in some challenges.\nWorkshop Environment As part of the workshop you will be provided with freshly installed OpenShift 4.9 clusters. Depending on attendee numbers we might ask you to gather in teams. Some workshop tasks must be done only once for the cluster (e.g. installing Operators), others like deploying and securing the application can be done by every team member separately in their own Project. This will be mentioned in the guide.\nAs there is not special setup for the OpenShift cluster you should be able to run the workshop with any 4.9 cluster of you own. Just make sure you have cluster admin privileges.\nWorkshop Flow We\u0026rsquo;ll tackle the topics at hand step by step with an introduction covering the things worked on before every section.\n"
},
{
	"uri": "https://ansible-learnfest.github.io/2-prepare-cluster/",
	"title": "Prepare Cluster",
	"tags": [],
	"description": "",
	"content": "Cluster Preparation Before you start you have to install a number of components you\u0026rsquo;ll use during the workshop. The first two are Gitea for providing Git services in your cluster and CodeReady Workspaces as development environment. But fear not, both are managed by Kubernetes operators on OpenShift.\nInstall and Prepare Gitea We\u0026rsquo;ll need Git repository services to keep our app and infrastructure source code, so let\u0026rsquo;s just install trusted Gitea using an operator:\nGitea is an OpenSource Git Server similar to GitHub. A team at Red Hat was so nice to create an Operator for it. This is a good example of how you can integrate an operator into your catalog that is not part of the default OperatorHub already.\n  If you don\u0026rsquo;t already have the oc client installed, you can download the matching version for your operating system here Log into your OpenShift Webconsole with you cluster admin credentials On the top right click on your username and then Copy login command to copy your login token On you local machine open a terminal log in with the oc command you copied Now using oc add the Gitea Operator to your OpenShift OperatorHub catalog  oc apply -f https://raw.githubusercontent.com/redhat-gpte-devopsautomation/gitea-operator/master/catalog_source.yaml  In the Web Console, go to Operators \u0026gt; OperatorHub and search for Gitea (You may need to disable search filters) Install the Gitea Operator with default settings Create a new OpenShift project called git Go to Installed Operators \u0026gt; Gitea Operator and click on the Create Instance tile in the git project    Click image to enlarge    On the Create Gitea page switch to the YAML view and make sure the following spec values are set:  spec: giteaSsl: true giteaAdminUser: gitea giteaAdminPassword: \u0026quot;gitea\u0026quot; giteaAdminEmail: opentlc-mgr@redhat.com  Click Create  After creation has finished:\n Access the route URL (you\u0026rsquo;ll find it e.g. in Networking \u0026gt; Routes \u0026gt; repository \u0026gt; Location) This will take you to the Gitea web UI Sign-In to Gitea with user gitea and password gitea Clone the example repo:  Click the + dropdown and choose New Migration As type choose Git URL: https://github.com/devsecops-workshop/quarkus-build-options.git Click Migrate Repository    In the cloned repository you\u0026rsquo;ll find a devfile.yml. We will need the URL to the file soon, so keep the tab open.\nInstall and Prepare CodeReady Workspaces (CRW)  Install the Red Hat CodeReady Workspaces for Devfile v1 and v2 Operator from OperatorHub (not the Tech Preview one!) with default settings Go to Installed Operators -\u0026gt; CodeReady Workspaces and create a new instance (CodeReady Workspaces instance Specification) using the default settings in the project openshift-workspaces Wait until deployment has finished. This may take a couple of minutes as several components will be deployed. Once the instance status is ready (You can check the YAML of the instance: status \u0026gt; cheClusterRunning: Available), look up the codeready Route in the openshift-workspaces namespace (You may need to toggle the Show default project button). Open the link in a new browser tab, choose htpasswd_provider and log in with your OCP credentials Allow selected permissions Enter an email address, First Name and Last Name to set up your account (you can make these up).  We could create a workspace from one of the templates that come with CodeReady Workspaces, but we want to use a customized workspace with some additionally defined plugins in a v1 devfile in our git repo. With devfiles you can share a complete workspace setup and with the click of a button you will end up in a fully configured project in your browser.\n  At the top click on Custom Workspace Copy the raw(!) URL of the devfile.yml file in your Gitea repository by clicking on the file and then on the Raw button (or Originalversion in German). Paste the full URL into the Enter devfile URL field and click Load Devfile  Once the content of the devfile is loaded click on Create \u0026amp; Open at the button You\u0026rsquo;ll get into the Starting workspace \u0026hellip; view, give the workspace containers some time to spin up.  When your workspace has finally started, have a good look around in the UI. It should look familiar if you have ever worked with VSCode or similar IDEs.\nWhen working with CRW make sure you have AdBlockers disabled, you are not on a VPN and a have good internet connection to ensure a stable setup. If you are facing any issues try to releod the Browser window. If that doesn\u0026rsquo;t help restart the workspace in the controls on yellow arrow at the top left side\n Your cluster is now prepared for the next step, proceed to the Inner Loop.\n"
},
{
	"uri": "https://ansible-learnfest.github.io/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Ansible LearnFest Guide What is it about This guide will lead you through installing, configuring and using Ansible Automation Platform. The format was called LearnFest by us because this is not supposed to be a fully scripted lab or workshop but a guided learning experience where you will get real hands-on experience by running all steps yourself.\nThis guide will give you tasks to set up a fully-fledged AAP environment together with some tipps and tricks to get you started and keep you going.\nOverview   Click image to enlarge   Collaboration This guide was created by Goetz Rieger and Christian Jung. Feel free to create a pull request or an issue in GitHub\n"
},
{
	"uri": "https://ansible-learnfest.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ansible-learnfest.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]