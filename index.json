[
{
	"uri": "https://ansible-learnfest.github.io/1-intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction The LearnFest is structured into two tracks, so this is coming your way:\nTrack 1 “Ansible Automation Platform Administrator” General Prerequisites:\n Access to PC with Ansible (esp ansible-navigator) Credentials/tokens to download the AAP2 installer and access the Red Hat Container registry and Red Hat Automation Hub  This usually means an account to the Red Hat Customer Portal   Optional: Write access to a GitLab or GitHub repository  Tasks:\n Install Automation Controller Write a Playbook using the ansible.controller collection to configure Automation Controller Install Private Automation Hub, sync with Red Hat Automation Hub Extend Automation Mesh Optional: Extending to multi node/cluster (Needs separate DB)  Track 2 “Automation Content Developer” General Prerequisites:\n Automation Controller and Private Automation Hub is up and running Access to ansible-builder is installed on RHEL 8 VM/instance  Tasks:\n Install and configure VSCode extension, learn how to use it Build a custom Execution Environment (EE) Use EE with ansible-navigator Push the EE to Private Automation Hub Use the EE in Automation Controller Change the EE Discuss version pinning, requirements management etc.  Let\u0026rsquo;s go!\n"
},
{
	"uri": "https://ansible-learnfest.github.io/2-getting-started/",
	"title": "Prepare Base Environment",
	"tags": [],
	"description": "",
	"content": "Setup your LearnFest Base Environment You\u0026rsquo;ll run the LearnFest tasks on RHEL instances on AWS. So before starting with AAP you have to stand up the needed instances.\nThe guide has been tested using a blank AWS environment sandbox Red Hatters can order in RHPDS. But everything should work the same in a regular AWS account with access tho the RHEL 8 marketplace AMIs.\n Deploy RHEL Instances into AWS Account So off to the first tasks: deploy the needed RHEL instances into an AWS account. And as a warm-up you\u0026rsquo;ll use Ansible for this (we have prepared the Playbook for you). If this your first encounter with Execution Environments and ansible-navigator; just enjoy, you\u0026rsquo;ll learn more about all this later.\nPrerequisites\n A PC or VM prepared to run ansible-navigator and podman Make sure you have access to an AWS account, Red Hatters please deploy Service \u0026ldquo;AWS Blank Open Environment\u0026rdquo; from RHPDS Make sure you have a valid Access Key ID and a Secret Access Key for your AWS account, Red Hatters will find this in the confirmation email from RHPDS  Tasks\n On your ansible-navigator machine: Clone https://github.com/ansible-learnfest/playbooks-infra.git and change into the new directory. Follow the instructions in the repo\u0026rsquo;s README.md file to deploy the LearnFest base environment instances  Update the number of instances in group_vars/all/main.yml to 5 (instance_total:) Change the name prefix (instance_name:) of the instances if you want The Playbook will use the SSH key ~/.ssh/id_rsa.pub by default, if this key doesn\u0026rsquo;t exist or you want to use another key, change ec2_key_pair:    How did ansible-navigator know which execution environment to use? Have a look at the ansible-navigator.yml config file\u0026hellip;\n Goals\n 5 x t3.large instances deployed in a new AWS VPC Look up the Public IPv4 DNS FQDN of your instances in the AWS Console. Being able to login via SSH into the instances using the FQDN\u0026rsquo;s and to become root  Example: ssh -i \u0026quot;~/.ssh/id_rsa\u0026quot; ec2-user@ec2-3-72-65-199.eu-central-1.compute.amazonaws.com    Tips\n Podman login for pulling the execution environment image is your quay.io creds with encrypted password, not the RH Customer Portal creds.  Instructions on how to get an employee account are on the source (Request a “Type 1” account) Verify you can access the execution environment   Using the prepared Ansible content you can tear down all instances and the VPC and start over: ansible-navigator run aws-infra.yml -e remove=true  "
},
{
	"uri": "https://ansible-learnfest.github.io/3-track-1/",
	"title": "Track 1: AAP Administrator",
	"tags": [],
	"description": "",
	"content": "Track 1 “Ansible Automation Platform Administrator” Tasks:\n Install Automation Controller Write a Playbook using the ansible.controller collection to configure Automation Controller Install Private Automation Hub, sync with Red Hat Automation Hub Extend Automation Mesh Optional: Extending to multi node/cluster (Needs separate DB)  "
},
{
	"uri": "https://ansible-learnfest.github.io/3-track-1/1-automation-controller/",
	"title": "Install Automation Controller",
	"tags": [],
	"description": "",
	"content": "Task 1: Install Automation Controller You should now have access to your AWS instances and you should be able to SSH into them. It’s time to deploy Ansible Automation Platform 2.2! We’ll start with installing Automation Controller on your instance 1.\nPrerequisites\n Able to SSH into your instances and to become root A Red Hat Customer Portal account with an AAP subscription  Tasks\n SSH into your instance number 1 to run the installer there. Become root: sudo -i Download the Ansible Automation Platform 2.2.0 Setup Bundle installer from Customer Portal to your instance.  The link to the download location can also be found in the installation docs. Tip: Copy the download link and use curl with single quotes around the link and the -o \u0026lt;filename\u0026gt; option to save to file.    In general follow the installation documentation to install Automation Controller with a database on the same node.\n Extract installer tarball, change into the directory. Create the most simple inventory file, do not install privat automation hub or anything else yet. Backup the default inventory file before.  There is an example for a basic inventory file for our simple installation scenario in chapter 2 of the installation documentation (see tips below). Attention: you can’t use “localhost” in the inventory file anymore, change it to the FQDN of the instance. You have to change all \u0026lt;...\u0026gt; values in the template   Hints:  You can skip the docs section “Attaching your Red Hat Ansible Automation Platform subscription“ because we are using the bundle installer and the AWS RHEL instances are already attached to the default RHEL 8 repos.   Run the platform installer with ./setup.sh When Automation Controller has been installed:  Login and attach an AAP Subscription using your Customer Portal User/Password Allow Analytics Accept   There you have it, your Automation Controller is up and running.  Goal\n Being able to log in to the web UI with the password you provided in the inventory file.  Tips\n Ansible Automation Platform 2.2 Installation Guide There is a link to instructions for creating a registry account in the docs (“Creating Registry Service Accounts guide”) There are instructions for obtaining the Red Hat Ansible Automation Platform installer in the docs (“Choosing and obtaining a Red Hat Ansible Automation Platform installer”)  "
},
{
	"uri": "https://ansible-learnfest.github.io/3-track-1/2-config-controller/",
	"title": "Configure Automation Controller",
	"tags": [],
	"description": "",
	"content": "Task 2: Configure Automation Controller Okay, Automation Controller is up and running but pretty empty. In this task you add some automation content to it. To make it not too easy and resemble more real life situations, you will use Ansible to configure Automation Controller objects.\nPrerequisites\n Automation Controller is running \u0026amp; accessible You can run ansible-navigator on a laptop/VM.  Tasks\n Create a Playbook using the ansible.controller collection to create these objects in your Automation Controller:  Inventory Hosts in the inventory, with your instance number 5 only Machine credentials to connect to your managed host Project to pull Ansible content from Template to install Apache on the managed hosts   If you haven\u0026rsquo;t done this before it might sound daunting, but fear not: Here is a chapter from one of our labs, you just have to migrate it to your infrastructure.  BTW you don\u0026rsquo;t have to install the ansible.controller collection because it\u0026rsquo;s already baked into the EE we used before to deploy instances.\n Okay\u0026hellip;\n On your system create a new directory next to the one with the cloned git repo from deploying the AWS instances. In the new directory create a Playbook resembling the one from our lab. Change:  Replace all awx.awx.* module calls with ansible.controller.* (we are using the supported collection here) Change the loop in the creating hosts section to only contain the public FQDN of your instance number 5 Make sure ssh_key_data: points to the SSH key you use to connect to the instances    You have seen how ansible-navigator knew which Execution Environment image to use, right? But this ansible-navigator.yml config magic only works when you run ansible-navigator in the same directory. You can specify the EE and other parameters on the commandline but it\u0026rsquo;s easier to track what you\u0026rsquo;ve done to copy the ansible-navigator.yml file over to your new directory and change it.\n  Configure credentials for the modules to talk to your Automation Controller:  Set the environment variables CONTROLLER_HOST, CONTROLLER_USERNAME, CONTROLLER_PASSWORD with the values of your Automation Controller and set CONTROLLER_VERIFY_SSL=false Important: Add the env vars to the ansible-navigator.yml file so they are available in the running container!   Run the Playbook using ansible-navigator  Hint: Use -m stdout to mimic the output of ansible-playbook    Goal\n The Playbook configured the objects needed The Template run installed and started Apache on instance 5 Opening the default webpage in a browser works.  Tips\n The collection/module documentation is here in Automation Hub. Go to Collections and filter for controller. If you would like to know what collections are in a certain Execution Environment, run ansible-navigator collections against the EE in question. If you get confused by all the naming changes (ansible.controller in Automation Hub, awx.awx upstream, lot\u0026rsquo;s of references to Tower in the docs)\u0026hellip; don\u0026rsquo;t be, all will finally be good! (TM)  "
},
{
	"uri": "https://ansible-learnfest.github.io/3-track-1/3-install-pah/",
	"title": "Install Private Automation Hub",
	"tags": [],
	"description": "",
	"content": "Task 3: Install Private Automation Hub The next step on your way to a full AAP infrastructure is to install Private Automation Hub (PAH) as on-premise complement to Red Hat Automation Hub. PAH allows to mirror Automation Hub and Ansible Galaxy collections as well as own in-house content. And in addition PAH can act as a container registry for execution environments images.\nPrerequisites\n Automation Controller is running \u0026amp; accessible You can connect to your instance 2  Tasks\n Install Private Automation Hub on your instance number 2, the documentation is here in chapter 2.3. The easiest way is to SSH into to the PAH instance, download the installer bundle like you did for Controller and install PAH locally (as in \u0026ldquo;don\u0026rsquo;t have the installer SSH to a remote machine\u0026rdquo;).  You can run the AAP installer in different ways, of course. You could run it from a competely different machine and connect to the hosts AAP is to be installed on, you could run it on the Controller instance like you did and have it connect to the PAH instance\u0026hellip; but for now do it the easy way so you don\u0026rsquo;t have to fiddle with SSH keys and become settings. :)\n  So go ahead, SSH to instance 2, become root and download the installer bundle again Take the inventory PAH example from the docs referenced above and adapt it to your needs.  Remember to replace localhost/127.0.0.1 with the public FQDN   Run the installer with your customized inventory file  Goal\n Opening and login to the Private Automation Hub web UI works.  Tips\n"
},
{
	"uri": "https://ansible-learnfest.github.io/3-track-1/4-use-pah/",
	"title": "Using Private Automation Hub",
	"tags": [],
	"description": "",
	"content": "Task 4: Using Private Automation Hub Prerequisites\n Automation Controller is running \u0026amp; accessible Private Automation Hub is running \u0026amp; accessible  Tasks\n Configure Automation Controller to access your Private Automation Hub Add collections from Red Hat Automation Hub, Galaxy and custom ones created by you. Add Excution Environment images  Important: You only have to do this because we didn\u0026rsquo;t have installer install Controller and PAH in one go. Then the integration would have been configured for you already. For the sake of understanding we decided to let you do this manually.\n Let\u0026rsquo;s start, as the docs for this are distributed over some places we\u0026rsquo;ll give some more instructions.\nIntegrate PAH into your Controller  In you PAH go to Collections-\u0026gt;API token management, hit Create Token and copy the token. Put it somewhere, the token will change every time you have to get it this way again! In Controller, go to Resources-\u0026gt;Credentials and Add three new credentials:  Name them PAH community, PAH certified and Pah published All belong to the Organisation default Credential Type is Ansible Galaxy/Automation Hub API Token Look up the Galaxy Server URL for each in PAH: In Collections-\u0026gt;Repository Management lookup the Repo URL for community, published and rh-certified and put them in respectively. You have created the API token already, paste in into the credentials    Add content to your (empty) PAH Most of this is well documented here\nSync collections from Red Hat Automation Hub\n Go to console.redhat.com and open Ansible Automation Platform-\u0026gt;Automation Hub-\u0026gt;Collections. Here you could enable/disable the sync of certain collections but there is a bug as of now! We\u0026rsquo;ll give you a working URL to sync all content as a workaround. What you need to do is to get the autentication token and configure it in your PAH:  In Red Hat Automation Hub Go to Connect to Hub and copy the Offline Token In PAH go to Collections-\u0026gt;Repository management-\u0026gt;Remote Edit the rh-certified remote:  URL `https://console.redhat.com/api/automation-hub/content/published/ Token the token you copied from RH AH Click Save and then hit Sync. This will sync all collections from Red Hat Automation Hub to your Private Automation Hub.      Sync selected comunity collections from Ansible Galaxy\n Galaxy is configured as the remote community out of the box To sync collections:  Create a regular requirements.yml file pointing to the collection you want, we\u0026rsquo;ll use the one from the docs:    collections: # Install a collection from Ansible Galaxy. - name: geerlingguy.php_roles version: 0.9.3 source: https://galaxy.ansible.com  Go to Repo Management, click the Remote tab again Edit the community remote In YAML requirements upload the requirements.yml file from your local machine. Click Save In the Remote overview tab click Sync for the community remote  Verify the sync of the collections in Collections-\u0026gt;Collections, switch the repositories with the dropdown at the top. There should be a lot of content in the Red Hat Certified repo and one collection in the Community repo.\nGoal\nTips\n"
},
{
	"uri": "https://ansible-learnfest.github.io/3-track-1/5-automation-mesh/",
	"title": "Extend Automation Mesh",
	"tags": [],
	"description": "",
	"content": "Task 5: Extend Automation Mesh Prerequisites\n Automation Controller is running \u0026amp; accessible You can run ansible-navigator on a laptop/VM.  Tasks\nGoal\nTips\n"
},
{
	"uri": "https://ansible-learnfest.github.io/4-track-2/",
	"title": "Track 2: Automation Content Developer",
	"tags": [],
	"description": "",
	"content": "Track 2: Automation Content Developer Tasks:\n Install and configure VSCode extension, learn how to use it Build a custom Execution Environment (EE) Use EE with ansible-navigator Push the EE to Private Automation Hub Use the EE in Automation Controller Change the EE Discuss version pinning, requirements management etc.  "
},
{
	"uri": "https://ansible-learnfest.github.io/4-track-2/1-vscode/",
	"title": "The VSCode extension",
	"tags": [],
	"description": "",
	"content": "Task 1: Learn about the VSCode extension We highly recommend making yourself familiar with VSCode and the Ansible extension. Even if you’re not planning to use it as your daily driver, it is good to know how it works to explain and show the benefit to customers.\nPrerequisites\nTasks\n Install VSCode https://code.visualstudio.com/ Install the Ansible extension: https://marketplace.visualstudio.com/items?itemName=redhat.ansible Install ansible-navigator Configure the VSCode extension to use EE Create a playbook/role/collection Get familiar with the VSCode extension features  tab completion syntax highlighting tool tips for modules: hover over and FQCN, Ctrl+Click on an FQCN to open documentation Ctrl+Space for module parameters, e.g. add a task calling ansible.builtin.yum and use Ctrl+Space to see all module attributes and attribute parameters Make syntax error and notice errors in the Problem pane (Ctrl+m): you might have to make sure ansible-lint is enabled and notice it is only checking when you save a file    Goal\nTips\n"
},
{
	"uri": "https://ansible-learnfest.github.io/4-track-2/2-build-ee/",
	"title": "Build an execution environment",
	"tags": [],
	"description": "",
	"content": "Task 2: Build an execution environment Prerequisites\nTasks\n Install ansible-builder: on RHEL this is provided by the AAP repo, on Fedora you will need “pip install ansible-builder”, it’s recommended to use a virtual environment in this case Create an execution environment with the following requirements  Base image is ee-supported-rhel8 Add a community collection e.g. containers.podman Add a supported content collection e.g. azure.azcollection Experiment with the other options, e.g. adding an RPM or Python package Use ansible-builder to build the EE   Configure ansible-navigator to use the previously created EE either by specifying it on the command line or by creating an ansible-builder configuration file Inspect your EE by using ansible-navigator, e.g. get the list of included collections, ansible versions etc. Run a playbook with your EE and verify everything works as expected Use environment variables to provide your Azure credentials and write a playbook using the azure.azcollection to create objects in Azure - you can get Azure credentials from RHPDS’ open environments  Goal\nTips\n Ansible-builder documentation: https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/2.1/html/ansible_builder_guide\nOr upstream: https://ansible-builder.readthedocs.io/en/stable/index.html Ansible-navigator documentation: https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/2.1/html/ansible_navigator_creator_guide/index\nOr upstream: https://ansible-navigator.readthedocs.io/en/latest/ List of certified collections: https://access.redhat.com/articles/3642632  "
},
{
	"uri": "https://ansible-learnfest.github.io/4-track-2/3-transfer-ee/",
	"title": "Transfer Execution Environment",
	"tags": [],
	"description": "",
	"content": "Task 3: Transfer your EE Prerequisites\nTasks\n Publish your EE to your private automation hub Experiment with other registries, e.g. Quay (make sure to either delete your EE after you\u0026rsquo;re done or make sure it’s not publicly accessible since the EE supported requires a subscription!)  Goal\nTips\n Skopeo documentation https://github.com/containers/skopeo Podman documentation https://docs.podman.io/en/latest/  "
},
{
	"uri": "https://ansible-learnfest.github.io/4-track-2/4-use-ee/",
	"title": "Using Private Automation Hub",
	"tags": [],
	"description": "",
	"content": "Task 4: Use the EE in controller Prerequisites\nTasks\n Configure the controller to pull the EE from automation hub Create a job template using the EE Test a playbook with the collection you added to the EE, e.g. perform an action in Azure  Challenge tasks:\n Build another EE with different content, import it into Controller and use different job templates with different EE’s Think about version pinning in the EE: what’s the best way to do it? How can you track versioning? If you use GitLab or GitHub have a look at renovate which can help you to track dependencies. https://docs.renovatebot.com/  Goal\nTips\n"
},
{
	"uri": "https://ansible-learnfest.github.io/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Ansible LearnFest Guide What is it about The Ansible LearnFest is a format we created because we felt there is a gap between the enablement and training offerings from Red Hat (workshops, guided labs, official trainings) and \u0026ldquo;real\u0026rdquo; hackathons with an open agenda. We wanted a format where the student gets tasks, goals and hints to help install and configure all the components of Ansible Automation Platform like Automation Controller, Private Automation Hub, Automation Mesh, Clustering, Automation Service Catalog etc him/herself.\nThis guide will lead you through exactly this: installing, configuring and using Ansible Automation Platform. But this is not your usual lab guide where you can follow along without a lot of thought; this is not supposed to be a fully scripted lab or workshop but a guided learning experience where you will get real hands-on experience by running all steps yourself.\nOverview   Click image to enlarge   Collaboration The Ansible LearnFest and this guide was created by Goetz Rieger and Christian Jung. Feel free to create a pull request or an issue in GitHub\n"
},
{
	"uri": "https://ansible-learnfest.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ansible-learnfest.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]